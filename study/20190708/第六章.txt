第六章 接口、lambda表达式与内部类
1. 接口（interface）技术，主要用来描述类具有什么功能，而并不给出每个功能的具体实现。一个类可以实现（implement）一个或多个接口，并在需要的地方，可以随时使用实现了相应接口的对象。
2． lambda表达式是一种表示可以在将来某个时间点执行的代码块的简洁方法（一个表示可执行代码块的简洁方法）。通过使用lambda表达式，可以用一种精巧而简洁的方式表示使用回调或变量行为的代码（用一种精巧的方式表示代码）。
3. 内部类（inner class）机制，内部类包含在另一个类中，该内部类中的方法可以访问其外部类的域。内部类技术主要用于设计具有相互协作关系的类集合。
4. 代理（proxy）是一种实现任何接口的对象。它可以用来构建系统级别的工具。
6.1 接口

1.要了解更多接口（interface）技术，主要用来描述类具有什么功能，而并不给出每个功能的具体实现。一个类可以实现（implement）一个或多个接口，并在需要的地方，可以随时使用实现了相应接口的对象。
2.
1 ) 超类优先。 如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会 被忽略。 
2 ) 接口冲突。 如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且 参数类型(不论是否是默认参数)相同的方法， 必须 覆盖这个方法来解决冲突 
6.2 接口实例

6.3 lambda表达式


