第三章  Java的基本程序设计机构

3.1 一个简单的Java应用程序
1. 区分大小写
2. 关键字 public 称为访问修饰符(access modifier), 这些修饰符用于控制程序的其他部分对这段代码的访问级別。
3。 关键字 class表明Java程序中的全部内容都包含在类中
4. 类名： 以字母开头，后面可以是字母数组的任意组合，没有长度限制，不能使用Java保留字，类名是以大写字母开头的名 词。如果名字由多个单词组成， 每个单词的第一个字母都应该大写
5. 源代码的文件名必须与公共类的名字相同， 并用 .java 作为扩展名
6. 运行已编译的程序时，Java虚拟机将从指定类中的main方法开始执行，因此为了代码能够执行，在类的源文件中必须包含一个 ain方法。声明为public
7. 在 ava中，用大括号划分程序的各个部分(通常称为块)。Java中任何方法的代码都用“ {”开始，用结束。
8. 每个 Java 应用程序都 必须有一个 main 方法， 其声明格式如下所示:
public class ClassName
{
	public static void main(String口 args) 
	{
	program statements
	}
 }
	
9. Java中的所有函數都属于某个类的方法(标准 术语将其称为方法，而不是成员函数)。 因此，Java中的 main 方法必须有一个外壳类。Java 中的 main 方法必须是静态的。关键字void 表示这个方法没有返回值，所不同的是 main 方法没有为操作系统返回退出代码，如果 ,main方法正常退出，那么Java 应用程序的退出代码为0，表示成功地运行了程序。 如果希望在终止程序时返回其他的代码，那就需要调用System,exit方法。

3.2 注释
1. 第3种注释可以用来自动地生成文档。这种注释以 /**开始， 以 */ 结束。

3.3 数据类型
1. Java是-种强类型语言。这就意味着必须为每一个变量声明一种类型: 在Java中，-共有8种基本类型(primitive type), 其中有 4种整型、2 种浮点类型、1 种用于表示 Unicode 编码的字符 单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。
2. 整型
int	4字节	-2^31～2^31-1
short	2字节	-2^15～2^15-1
long	8字节	-2^63～2^63-1
byte	1字节	-128～127

长整型数值有一个后缀 L或1 ( 如 4000000000L 。) 十六进制数值有一个前缀 0x 或0X ( 如 OxCAFEL八进制有一个前缀0,例如，010 对应八进制中的 8。很显然，八进制表示法比较容易混淆，所以建议最好不要使用八进制常数。
从Java 7开始，加上前缀 0b 或 0B 就可以写二进制数。例如， OblOO丨就是 9。另外，同样是从Java7开始，还可以为数字字面量加下划线，如用1_000_000(或册1丨丨丨_0100_0丨0 0_丨0 00_0000) 表示一百万。这些下划线只是为丫让人更易读。Java编译器会去除这些下划线
3. 浮点类型
float	4字节	有效位数6～7位
double	8字节	有效位数15位

绝大多数使用double，极少使用float，例如 单精度数据的库，或者需要存储大量数据。	
float类型的数值有一个后缀F或f (例如，3.14F。) 没有后缀F的浮点数值(如3.14)默认为double 类型。当然，也可以在浮点数值后面添加后缀D或d ( 例如，3.14D)。
4。 char类型
char 类型的字面量值要用单引号括起来
5. Unicode和char类型
6. boolean类型
boolean(布尔)类型有两个值: false 和 true , 用来判定逻辑条件 整型值和布尔值之间 不能进行相互转换。

3.4 变量
1. 变量名必须是一个以字母开头并由字母或数字构成的序列
2. 声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的 变量。
3. 在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写 风格。
4. 利用关键字final指示常量。关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上, 常量名使用全大写。
5. 在Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。可以使用关键字 static fina丨设置一个类常量。 类常量的定义位于 main 方法的外部。 因此， 在同一个类的其他方法中也可 以使用这个常量。 而且，如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。 

3.5 运算符
1.  整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。
2. 如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。 否则， 如果其中一个操作数是 float 类型， 另一个操作数将会转换为 float 类型。否则 如果其中一个操作数是 long 类型 另一个操作数将会转换为 long 类型 。 否则 两个操作数都将被转换为 int 类型 
3. 强制类型转换的语法格式是在圆括号中给出想要转换的目标类型， 后面紧跟待转换的变 量名。 例如: 
double x * 9.997; i
nt nx = (int) x; 
round 方法返回的结果为 long 类型 
4.  不要在 boolean 类型与任何数值类型之间进行强制类型转换， 这样可以防止 发生错误。 只有极少数的情况才需要将布尔类型转换为数值类型， 这时可以使用条件表 达式b? 1:0 
5. >>> 运算符会用 0 填充高位， 这与>> 不同， 它会用符号位填充高位。 不存在 <<< 运算符。 
6. 运算符优先级
7. 枚举类型
枚举类型包括有限个命名的值 例如
enum Size { SMALL, MEDIUM, LARGE, EXTR.A LARCE }; 
现在， 可以声明这种类型的变量: 
Size s = Size.MEDIUM; 
Size 类型的变量只能存储这个类型声明中给定的某个枚举值， 或者 null 值， null 表示这 个变量没有设置任何值。 

3.6 字符串
1. 子串：
String greeting = "Hello";
String s = greeting.substring(0, 3);   // s=Hel”
字符串 s.substring(a, b) 的长度 为b-a。 
2. 拼接 ：
Java 语言允许使用 + 号连接(拼接)两个字符串。 
当将一个字符串与一个非字符串的值进行拼接时， 后者被转换成字符串 
如果需要把多个字符串放在一起， 用一个定界符分隔， 可以使用静态 join 方法: 
String all = String.join(" / ", "S", "M", "L", "XL");    // all is the string "S / H / L / XL" 
3. 不可变字符串
String类没有提供用于修改字符串的方法
greeting = greeting.substring(0, 3) + "p!";   //上面这条语句将greeting当前值修改为“ Help!”。
4. 检查字符串是否相等
s.equals(t)  
要想检测两个字符串是否相等， 而不区分大小写， 可以使用 equalsIgnoreCase 方法。 "Hello".equalsIgnoreCase("hel1o") 
5.空串与Null串
空串 "" 是长度为 0 的字符串。 可以调用以下代码检查一个字符串是否为空: if (str.length()= 0)
或if (str.equals("")) 
空串是一个 Java 对象， 有自己的串长度（0 ) 和内容(空)。不过， String 变量还可以存 放一个特殊的值，名为null, 这表示目前没有任何对象与该变量关联。要检查一个字符串是否为null, 要使用以下条件: 
if (str == null) 
要检查字符串既不是 null 也不为空串， 这种情况下就需要使用以下条件: if (str != null && str.length() != 0) 
首先要检查 str 不为 null 在第 4 章会看到 如果在一个 null 值上调用方法 会出现错误。
6. 码点与代码单元

